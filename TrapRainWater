class Solution {
    public int trap(int[] arr) {
       ArrayList<Integer> list1 = new ArrayList<>();
		for (int i = 0; i < arr.length; i++)
			list1.add(arr[i]);
		System.out.println("l1" + list1);

		ArrayList<Integer> maxleft = left(list1);
		ArrayList<Integer> maxright = right(list1);
		int count = 0;
		for (int i = 0; i < list1.size() - 1; i++) {
			int min = Math.min(maxleft.get(i), maxright.get(maxright.size() - 1 - i));
			// System.out.println(min);
			count = count + ((list1.get(i)>=min)? 0 :min-list1.get(i));
			//count = count + ((list1.get(i) != 0) ? min - list1.get(i) : min);
		}
		System.out.println("");
		return count;
 
    }
    	public static ArrayList<Integer> left(ArrayList<Integer> list1) {
		ArrayList<Integer> maxleft = new ArrayList<>();
		maxleft.add(list1.get(0));
		for (int i = 1; i < list1.size(); i++) {
			if (list1.get(i) > maxleft.get(i - 1))
				maxleft.add(list1.get(i));
			else
				maxleft.add(maxleft.get(i - 1));
		}

		System.out.println("ml" + maxleft);
		return maxleft;

	}

	public static ArrayList<Integer> right(ArrayList<Integer> list1) {
		ArrayList<Integer> maxright = new ArrayList<>();
		maxright.add(list1.get(list1.size() - 1));
		for (int i = list1.size() - 1; i > 0; i--) {
			if (list1.get(i) > maxright.get(list1.size() - 1 - i))
				maxright.add(list1.get(i));
			else
				maxright.add(maxright.get(list1.size() - 1 - i));
		}
		System.out.println("mr" + maxright);
		return maxright;
	}
}
